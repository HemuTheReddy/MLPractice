# -*- coding: utf-8 -*-
"""practiceModel_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1REyxrZy-e0VCMd6InR9S7ipES2WfOvZS
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.model_selection import train_test_split
# Load Data
weatherData = pd.read_csv("/content/drive/MyDrive/practiceModel_1 data/weatherHistory.csv")

#Make column data and normalize it
ct = make_column_transformer(
    (MinMaxScaler(), ["Temperature (C)", "Wind Speed (km/h)", "Wind Bearing (degrees)", "Visibility (km)", "Pressure (millibars)"]),
    (OneHotEncoder(handle_unknown = "ignore"), ["Summary", "Precip Type", "Daily Summary"])
)
# Create Data Sets
X = weatherData.drop(["Formatted Date", "Apparent Temperature (C)", "Loud Cover"] , axis = 1)
y = weatherData["Apparent Temperature (C)"]

# Create training and test sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

# Fit column transformer to data
ct.fit(X_train)

#Normalize data

X_train_normal = ct.transform(X_train)
X_test_normal = ct.transform(X_test)

# BUILD THE NETWORK
tf.random.set_seed(42)

weatherModel = tf.keras.Sequential([
    tf.keras.layers.Dense(10),
    tf.keras.layers.Dense(1)
])
weatherModel.compile(loss=tf.keras.losses.mae,
                     optimizer=tf.keras.optimizers.Adam(lr = .01),
                     metrics = ["mae"])
history = weatherModel.fit(tf.expand_dims(X_train_normal.toarray(), axis = -1), y_train, epochs = 20)

weatherModel.evaluate(X_test_normal.toarray(), y_test)
y_pred = weatherModel.predict([y_test])

# Plot mae data
pd.DataFrame(history.history).plot()
plt.ylabel("loss")
plt.xlabel("epochs")

# Plot data
plt.scatter(X_train["Temperature (C)"], y_train, c="b", label = "Training Data")
plt.scatter(X_test["Temperature (C)"], y_test, c="g", label = "Testing Data")
plt.scatter(X_test["Temperature (C)"], y_pred, c="r", label = "Prediction Data")
plt.legend();